pipeline {
    agent any
    
    environment {
        // Docker configuration
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'nkdhd/event-booking-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        
        // Git configuration
        GIT_REPO = 'https://github.com/your-username/event-booking-system.git'
        GIT_CREDENTIALS_ID = 'github-credentials'
        
        // Google Cloud configuration
        GCP_PROJECT_ID = 'ordinal-throne-463911-h8'
        GCP_ZONE = 'us-central1-a'
        GCP_INSTANCE = 'event-booking-vm'
        GCP_CREDENTIALS_ID = 'gcp-service-account'
        
        // Application configuration
        NODE_ENV = 'production'
        SKIP_ENV_VALIDATION = '1'
        NEXT_TELEMETRY_DISABLED = '1'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    
    triggers {
        githubPush()
        pollSCM('H/5 * * * *') // Poll every 5 minutes as fallback
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ Checking out source code..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: env.GIT_REPO,
                            credentialsId: env.GIT_CREDENTIALS_ID
                        ]]
                    ])
                    
                    // Get commit information
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_COMMIT_MSG = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                    
                    echo "üìù Commit: ${env.GIT_COMMIT_SHORT} - ${env.GIT_COMMIT_MSG}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    echo "üîß Setting up build environment..."
                    
                    // Set dynamic environment variables
                    env.BUILD_TIMESTAMP = sh(
                        script: 'date +%Y%m%d-%H%M%S',
                        returnStdout: true
                    ).trim()
                    
                    env.IMAGE_TAG = "${env.BUILD_TIMESTAMP}-${env.GIT_COMMIT_SHORT}"
                    env.FULL_IMAGE_NAME = "${env.DOCKER_REPO}:${env.IMAGE_TAG}"
                    env.LATEST_IMAGE_NAME = "${env.DOCKER_REPO}:latest"
                    
                    echo "üè∑Ô∏è Image tag: ${env.IMAGE_TAG}"
                    echo "üì¶ Full image name: ${env.FULL_IMAGE_NAME}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing Node.js dependencies..."
                    sh '''
                        # Check Node.js version
                        node --version
                        npm --version
                        
                        # Clean install dependencies
                        npm ci --only=production
                        
                        # Install dev dependencies for build
                        npm install --only=dev
                    '''
                }
            }
        }
        
        stage('Code Quality & Security') {
            parallel {
                stage('Lint') {
                    steps {
                        script {
                            echo "üîç Running ESLint..."
                            sh 'npm run lint'
                        }
                    }
                }
                
                stage('Type Check') {
                    steps {
                        script {
                            echo "üîç Running TypeScript type check..."
                            sh 'npm run typecheck'
                        }
                    }
                }
                
                stage('Security Audit') {
                    steps {
                        script {
                            echo "üîí Running security audit..."
                            sh '''
                                # Run npm audit
                                npm audit --audit-level=moderate || true
                                
                                # Check for known vulnerabilities
                                npx audit-ci --moderate || true
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            echo "üß™ Running unit tests..."
                            sh '''
                                # Run unit tests with coverage
                                npm run test:unit || true
                                
                                # Generate coverage report
                                npm run test:coverage || true
                            '''
                        }
                    }
                    post {
                        always {
                            // Publish test results
                            publishTestResults testResultsPattern: 'test-results/unit/*.xml'
                            
                            // Publish coverage report
                            publishCoverage adapters: [
                                istanbulCoberturaAdapter('coverage/cobertura-coverage.xml')
                            ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        script {
                            echo "üîó Running integration tests..."
                            sh '''
                                # Start test database
                                docker run -d --name test-mysql \
                                    -e MYSQL_ROOT_PASSWORD=testpass \
                                    -e MYSQL_DATABASE=test_db \
                                    -p 3307:3306 \
                                    mysql:8.0
                                
                                # Wait for database to be ready
                                sleep 30
                                
                                # Run integration tests
                                DATABASE_URL="mysql://root:testpass@localhost:3307/test_db" \
                                npm run test:integration || true
                                
                                # Cleanup
                                docker stop test-mysql || true
                                docker rm test-mysql || true
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                script {
                    echo "üèóÔ∏è Building Next.js application..."
                    sh '''
                        # Set build environment variables
                        export NODE_ENV=production
                        export SKIP_ENV_VALIDATION=1
                        export DATABASE_URL="mysql://dummy:dummy@localhost:3306/dummy"
                        
                        # Build the application
                        npm run build
                        
                        # Verify build output
                        ls -la .next/
                        ls -la .next/standalone/
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    sh '''
                        # Build multi-stage Docker image
                        docker build \
                            --tag ${FULL_IMAGE_NAME} \
                            --tag ${LATEST_IMAGE_NAME} \
                            --build-arg NODE_ENV=production \
                            --build-arg BUILD_TIMESTAMP=${BUILD_TIMESTAMP} \
                            --build-arg GIT_COMMIT=${GIT_COMMIT_SHORT} \
                            .
                        
                        # Verify image was built
                        docker images | grep ${DOCKER_REPO}
                        
                        # Test image locally
                        docker run --rm -d \
                            --name test-container \
                            -p 3333:3000 \
                            -e DATABASE_URL="mysql://dummy:dummy@localhost:3306/dummy" \
                            -e AUTH_SECRET="test-secret" \
                            -e NEXTAUTH_URL="http://localhost:3333" \
                            ${FULL_IMAGE_NAME}
                        
                        # Wait for container to start
                        sleep 15
                        
                        # Test health endpoint
                        curl -f http://localhost:3333/api/health || echo "Health check failed"
                        
                        # Cleanup test container
                        docker stop test-container || true
                    '''
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    echo "üîí Scanning Docker image for vulnerabilities..."
                    sh '''
                        # Install Trivy if not available
                        if ! command -v trivy &> /dev/null; then
                            echo "Installing Trivy..."
                            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                            echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list
                            sudo apt-get update
                            sudo apt-get install trivy
                        fi
                        
                        # Scan image for vulnerabilities
                        trivy image --exit-code 0 --severity HIGH,CRITICAL ${FULL_IMAGE_NAME} || true
                    '''
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    expression { return params.FORCE_DEPLOY == true }
                }
            }
            steps {
                script {
                    echo "üì§ Pushing Docker image to registry..."
                    withCredentials([usernamePassword(
                        credentialsId: env.DOCKER_CREDENTIALS_ID,
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                            # Login to Docker Hub
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            
                            # Push tagged image
                            docker push ${FULL_IMAGE_NAME}
                            
                            # Push latest tag
                            docker push ${LATEST_IMAGE_NAME}
                            
                            # Logout
                            docker logout
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                allOf {
                    branch 'main'
                    expression { return currentBuild.result != 'FAILURE' }
                }
            }
            steps {
                script {
                    echo "üöÄ Deploying to Google Cloud VM..."
                    withCredentials([file(
                        credentialsId: env.GCP_CREDENTIALS_ID,
                        variable: 'GOOGLE_APPLICATION_CREDENTIALS'
                    )]) {
                        sh '''
                            # Authenticate with Google Cloud
                            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                            gcloud config set project ${GCP_PROJECT_ID}
                            
                            # Deploy to VM
                            gcloud compute ssh ${GCP_INSTANCE} \
                                --zone=${GCP_ZONE} \
                                --command="
                                    cd /opt/event-booking-system && \
                                    docker-compose pull app && \
                                    docker-compose up -d app && \
                                    docker system prune -f
                                " || echo "Deployment failed - VM may not be ready yet"
                        '''
                    }
                }
            }
        }
        
        stage('Health Check') {
            when {
                allOf {
                    branch 'main'
                    expression { return currentBuild.result != 'FAILURE' }
                }
            }
            steps {
                script {
                    echo "üè• Performing post-deployment health check..."
                    sh '''
                        # Get VM external IP
                        EXTERNAL_IP=$(gcloud compute instances describe ${GCP_INSTANCE} \
                            --zone=${GCP_ZONE} \
                            --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
                        
                        echo "External IP: $EXTERNAL_IP"
                        
                        # Wait for application to be ready
                        for i in {1..10}; do
                            if curl -f http://$EXTERNAL_IP:3000/api/health; then
                                echo "‚úÖ Application is healthy!"
                                break
                            else
                                echo "‚è≥ Waiting for application... (attempt $i/10)"
                                sleep 30
                            fi
                        done
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up..."
                sh '''
                    # Remove test containers
                    docker ps -aq --filter "name=test-" | xargs -r docker rm -f
                    
                    # Clean up old images (keep last 5)
                    docker images ${DOCKER_REPO} --format "table {{.Tag}}" | \
                        tail -n +6 | \
                        xargs -r -I {} docker rmi ${DOCKER_REPO}:{} || true
                    
                    # Clean up build artifacts
                    rm -rf node_modules/.cache
                    rm -rf .next/cache
                '''
            }
        }
        
        success {
            script {
                echo "‚úÖ Pipeline completed successfully!"
                
                // Send success notification
                slackSend(
                    channel: '#deployments',
                    color: 'good',
                    message: """
                        ‚úÖ *Event Booking System* - Deployment Successful
                        
                        *Branch:* ${env.BRANCH_NAME}
                        *Commit:* ${env.GIT_COMMIT_SHORT} - ${env.GIT_COMMIT_MSG}
                        *Image:* ${env.FULL_IMAGE_NAME}
                        *Build:* ${env.BUILD_NUMBER}
                        *Duration:* ${currentBuild.durationString}
                        
                        üîó <${env.BUILD_URL}|View Build>
                    """
                )
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline failed!"
                
                // Send failure notification
                slackSend(
                    channel: '#deployments',
                    color: 'danger',
                    message: """
                        ‚ùå *Event Booking System* - Deployment Failed
                        
                        *Branch:* ${env.BRANCH_NAME}
                        *Commit:* ${env.GIT_COMMIT_SHORT} - ${env.GIT_COMMIT_MSG}
                        *Build:* ${env.BUILD_NUMBER}
                        *Duration:* ${currentBuild.durationString}
                        
                        üîó <${env.BUILD_URL}|View Build>
                        üìã <${env.BUILD_URL}/console|View Console>
                    """
                )
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline completed with warnings!"
            }
        }
    }
}
