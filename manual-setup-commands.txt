# MANUAL SETUP COMMANDS FOR GOOGLE CLOUD CONSOLE SSH
# Copy and paste these commands one by one in the browser SSH terminal

# 1. Create Administrative User
echo "Creating admin user..."
sudo useradd -m -s /bin/bash admin 2>/dev/null || echo "User exists"
echo "admin:Admin" | sudo chpasswd
sudo usermod -aG sudo admin
sudo usermod -aG docker admin

# Enable password authentication
sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
sudo systemctl restart sshd

# 2. Get External IP
EXTERNAL_IP=$(curl -s http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip -H "Metadata-Flavor: Google")
echo "External IP: $EXTERNAL_IP"

# 3. Setup Jenkins
cd /opt/event-booking-system || sudo mkdir -p /opt/event-booking-system && cd /opt/event-booking-system

# Create Jenkins Docker Compose
sudo tee docker-compose.jenkins.yml > /dev/null << 'EOF'
version: '3.8'
services:
  jenkins:
    image: jenkins/jenkins:lts
    container_name: event-booking-jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    user: root
volumes:
  jenkins_data:
EOF

# Start Jenkins
sudo docker-compose -f docker-compose.jenkins.yml up -d

# 4. Setup Grafana
sudo tee docker-compose.grafana.yml > /dev/null << 'EOF'
version: '3.8'
services:
  grafana:
    image: grafana/grafana:latest
    container_name: event-booking-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
volumes:
  grafana_data:
EOF

# Start Grafana
sudo docker-compose -f docker-compose.grafana.yml up -d

# 5. Setup Prometheus
sudo mkdir -p monitoring
sudo tee monitoring/prometheus.yml > /dev/null << 'EOF'
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['localhost:9100']
EOF

sudo tee docker-compose.monitoring.yml > /dev/null << 'EOF'
version: '3.8'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: event-booking-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
volumes:
  prometheus_data:
EOF

# Start monitoring
sudo docker-compose -f docker-compose.monitoring.yml up -d

# 6. Create demo application
sudo tee docker-compose.app.yml > /dev/null << 'EOF'
version: '3.8'
services:
  app:
    image: nginx:alpine
    container_name: demo-app
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./html:/usr/share/nginx/html
EOF

sudo mkdir -p html
sudo tee html/index.html > /dev/null << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Event Booking System - Software Architecture Course</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        .service { margin: 20px 0; padding: 15px; background: #e8f4fd; border-radius: 5px; }
        .credentials { background: #fff3cd; padding: 10px; border-radius: 5px; margin: 10px 0; }
        a { color: #007bff; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎫 Event Booking System</h1>
        <p><strong>Software Architecture Course Project</strong></p>
        
        <div class="service">
            <h3>📊 Monitoring Dashboard (Grafana)</h3>
            <p><a href="http://$EXTERNAL_IP:3001" target="_blank">Access Grafana Dashboard</a></p>
            <div class="credentials">
                <strong>Login Credentials:</strong><br>
                Username: admin<br>
                Password: Admin
            </div>
        </div>

        <div class="service">
            <h3>🔧 CI/CD Pipeline (Jenkins)</h3>
            <p><a href="http://$EXTERNAL_IP:8080" target="_blank">Access Jenkins Pipeline</a></p>
            <div class="credentials">
                <strong>Login Credentials:</strong><br>
                Username: admin<br>
                Password: admin123
            </div>
        </div>

        <div class="service">
            <h3>🖥️ VPS Administrative Access</h3>
            <div class="credentials">
                <strong>SSH Access:</strong><br>
                Host: $EXTERNAL_IP<br>
                Username: admin<br>
                Password: Admin
            </div>
        </div>
    </div>
</body>
</html>
EOF

# Start demo app
sudo docker-compose -f docker-compose.app.yml up -d

# 7. Wait for services and check status
echo "Waiting for services to start..."
sleep 60

echo "Checking service status..."
sudo docker ps

# 8. Get Jenkins initial password
echo "Getting Jenkins password..."
sleep 30
JENKINS_PASSWORD=$(sudo docker exec event-booking-jenkins cat /var/jenkins_home/secrets/initialAdminPassword 2>/dev/null || echo "admin123")

# 9. Configure Grafana data source
echo "Configuring Grafana..."
sleep 30
curl -X POST \
  http://admin:Admin@localhost:3001/api/datasources \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "Prometheus",
    "type": "prometheus",
    "url": "http://prometheus:9090",
    "access": "proxy",
    "isDefault": true
  }' 2>/dev/null || echo "Data source configuration attempted"

# 10. Create credentials file
sudo tee /home/admin/submission-credentials.txt > /dev/null << EOF
SOFTWARE ARCHITECTURE COURSE - SUBMISSION CREDENTIALS
====================================================

VPS Administrative Access:
Host: $EXTERNAL_IP
Username: admin
Password: Admin

Jenkins CI/CD Pipeline:
URL: http://$EXTERNAL_IP:8080
Username: admin
Password: $JENKINS_PASSWORD

Grafana Monitoring Dashboard:
URL: http://$EXTERNAL_IP:3001
Username: admin
Password: Admin

Additional Services:
- Demo Application: http://$EXTERNAL_IP:3000
- Prometheus: http://$EXTERNAL_IP:9090

Generated on: $(date)
EOF

sudo chown admin:admin /home/admin/submission-credentials.txt

# 11. Final output
echo ""
echo "=== SETUP COMPLETE ==="
echo ""
echo "🔐 VPS Administrative Access:"
echo "   Host: $EXTERNAL_IP"
echo "   Username: admin"
echo "   Password: Admin"
echo ""
echo "🔧 Jenkins CI/CD Pipeline:"
echo "   URL: http://$EXTERNAL_IP:8080"
echo "   Username: admin"
echo "   Password: $JENKINS_PASSWORD"
echo ""
echo "📊 Grafana Monitoring Dashboard:"
echo "   URL: http://$EXTERNAL_IP:3001"
echo "   Username: admin"
echo "   Password: Admin"
echo ""
echo "🌐 Demo Application:"
echo "   URL: http://$EXTERNAL_IP:3000"
echo ""
echo "✅ All credentials saved to: /home/admin/submission-credentials.txt"
echo "🎯 Ready for course submission!"
